#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dotfiles_usage() {
  printf "dotfiles - Tools for managing and installing dotfiles\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles COMMAND\n"
  printf "  dotfiles [COMMAND] --help | -h\n"
  printf "  dotfiles --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create symlinks from .dotfiles to home directory.\n" "stow-dotfiles                "
  printf "  %s   Create symlink for VSCode settings.json.\n" "symlink-vscode               "
  printf "  %s   Install VSCode extensions from .dotfiles/.config/vscode/extesions.txt.\n" "install-vscode-extensions    "
  printf "  %s   Install extesion and add it to from .dotfiles/.config/vscode/extesions.txt.\n" "install-vscode-extension     "
  printf "  %s   Update extension list at .dotfiles/.config/vscode/extesions.txt from already installed extensions.\n" "update-vscode-extensions-list"
  printf "  %s   Uninstall extesion and remove it from .dotfiles/.config/vscode/extesions.txt.\n" "uninstall-vscode-extension   "
  printf "  %s   Syncronize VSCode according to extensions at .dotfiles/.config/vscode/extesions.txt.\n" "sync-vscode-extensions       "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
dotfiles_stow_dotfiles_usage() {
  printf "dotfiles stow-dotfiles - Create symlinks from .dotfiles to home directory.\n\n"
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles stow-dotfiles\n"
  printf "  dotfiles stow-dotfiles --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_symlink_vscode_usage() {
  printf "dotfiles symlink-vscode - Create symlink for VSCode settings.json.\n\n"
  printf "Alias: sym-vscode\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles symlink-vscode\n"
  printf "  dotfiles symlink-vscode --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_install_vscode_extensions_usage() {
  printf "dotfiles install-vscode-extensions - Install VSCode extensions from .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: i-vscode-exts\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles install-vscode-extensions [OPTIONS]\n"
  printf "  dotfiles install-vscode-extensions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--update, -u"
    printf "    In case extesion is already installed, it will update it to last version.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_install_vscode_extension_usage() {
  printf "dotfiles install-vscode-extension - Install extesion and add it to from .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: i-vscode-ext\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles install-vscode-extension EXTENSION-ID\n"
  printf "  dotfiles install-vscode-extension --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "EXTENSION-ID"
    printf "    Extension ID to be installed.\n"
    echo

  fi
}

# :command.usage
dotfiles_update_vscode_extensions_list_usage() {
  printf "dotfiles update-vscode-extensions-list - Update extension list at .dotfiles/.config/vscode/extesions.txt from already installed extensions.\n\n"
  printf "Alias: u-vscode-ext-list\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles update-vscode-extensions-list\n"
  printf "  dotfiles update-vscode-extensions-list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_uninstall_vscode_extension_usage() {
  printf "dotfiles uninstall-vscode-extension - Uninstall extesion and remove it from .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: un-vscode-ext\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles uninstall-vscode-extension EXTENSION-ID\n"
  printf "  dotfiles uninstall-vscode-extension --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "EXTENSION-ID"
    printf "    Extension ID to be uninstalled.\n"
    echo

  fi
}

# :command.usage
dotfiles_sync_vscode_extensions_usage() {
  printf "dotfiles sync-vscode-extensions - Syncronize VSCode according to extensions at .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: sync-vscode-exts\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles sync-vscode-extensions\n"
  printf "  dotfiles sync-vscode-extensions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# src/lib/echo_strings.sh
#!/bin/bash

# Define sections limits
symbol="─"
times=50
section_limit=""
for ((i=0; i<times; i++)); do
    section_limit+="$symbol"
done
section_limit="$(white_bold "$section_limit")"

section() {
    echo "$section_limit"
}

# Info
info() {
    echo "$(cyan_bold "$1")"
}

# Header
header() {
    echo "$(white_bold "$1")"
}

# Success
success() {
    echo "$(green_bold "✅ [Success] - $1")"
}

# Warning
warning() {
    echo "$(yellow_bold "⚠️ [Warning] - $1")"
}

# Error
error() {
    echo "$(red_bold "❌ [Error] - $1")"
}

# src/lib/globasl.sh
#!/bin/bash

# DOTFILES PATHS
DOTFILES_DIR="$HOME/.dotfiles"

VSCODE_CONFIG_DIR="$HOME/Library/Application Support/Code/User"
VSCODE_CONFIG_FILE="settings.json"
VSCODE_EXTENSIONS_FILE="$HOME/.dotfiles/.config/vscode/extensions.txt"

# SSH PATH VARIABLES
SSH_PATH="$HOME/.ssh"
SSH_KEYS_PATH="$SSH_PATH/keys"
SSH_CONFIG_FILE="$SSH_PATH/config"

# CONFIGURATION FILES
NIX_CONFIG_DIR="$HOME/.config/nix/nix.conf"
NIX_DARWIN_DIR="$HOME/.config/nix/nix-darwin"

# src/lib/send_completions.sh
send_completions() {
  echo $'# dotfiles completion                                      -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_dotfiles_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_dotfiles_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'install-vscode-extensions\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help --update -h -u")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'install-vscode-extension\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'symlink-vscode\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'stow-dotfiles\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'i-vscode-exts\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help --update -h -u")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'i-vscode-ext\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'sym-vscode\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotfiles_completions_filter "--help --version -h -v i-vscode-ext i-vscode-exts install-vscode-extension install-vscode-extensions s stow-dotfiles sym-vscode symlink-vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _dotfiles_completions dotfiles'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
dotfiles_stow_dotfiles_command() {

  # src/stow_dotfiles_command.sh
  section
  info "Cretaing symlinks for .dotfiles at home directory..."
  cd $DOTFILES_DIR
  stow .
  success "Symlinks to .dotfiles created at home directory"
  section

}

# :command.function
dotfiles_symlink_vscode_command() {

  # src/symlink_vscode_command.sh
  #!/bin/bash

  # Ensure the target directory exists
  mkdir -p "$VSCODE_CONFIG_DIR"

  # Check if the file already exists
  section
  info "Checking whether VSCode settings.json alredy exists at $VSCODE_CONFIG_DIR"
  if [ -f "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    info "Removing existing file $VSCODE_CONFIG_FILE"
    rm "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"
  fi

  # Create symlink, but make sure the file doesn't already exist
  info "Creating symlink for $VSCODE_CONFIG_FILE at $VSCODE_CONFIG_DIR"
  ln -sf "$DOTFILES_DIR/vscode/$VSCODE_CONFIG_FILE" "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"

  # Verify if the symlink was successfully created
  if [ -L "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    success "Symlink succesfully created!"
  else
    error "There was a problem creating the symlink..."
  fi
  section

}

# :command.function
dotfiles_install_vscode_extensions_command() {

  # src/install_vscode_extensions_command.sh
  #!/bin/bash

  update=${args[--update]}

  # Verificar si el archivo de extensiones existe
  if [ ! -f "$VSCODE_EXTENSIONS_FILE" ]; then
    warning "El archivo $VSCODE_EXTENSIONS_FILE no existe."
    exit 1
  fi

  # Leer el archivo y instalar las extensiones
  info "Reading extensions file at $VSCODE_EXTENSIONS_FILE..."
  while IFS= read -r extension; do
    # Verificar que la línea no esté vacía y no comience con #
    if [ -n "$extension" ] && [[ ! "$extension" =~ ^# ]]; then
      section

      if [[ -n "$update" ]]; then
        info "Installing extension: $extension"
        code --install-extension "$extension" --force

      else

        info "Installing extension: $extension"
        warning "Probando"
        code --install-extension "$extension"
      fi

    fi
  done < "$VSCODE_EXTENSIONS_FILE"
  code --list-extensions > "$VSCODE_EXTENSIONS_FILE"
  section

  success "Extesions installation completed successfully!."

}

# :command.function
dotfiles_install_vscode_extension_command() {

  # src/install_vscode_extension_command.sh
  #!/bin/bash

  extension_id=${args[extension-id]}

  section
  if code --list-extensions 2>/dev/null | grep -q "$extension_id"; then
      warning "Extension '$extension_id' was already installed!."
      info "Please, run 'dotfiles install-vscode-extensions --force' instead for updating to last version."
  else
    info "Installing extension '$extension_id'..."
    code --install-extension "$extension_id"

    if [ $? -eq 0 ]; then
      success "Extension '$extension_id' succesfully installed!."
    else
      error "Error installing '$extension_id'."
      exit 1
    fi

  fi

  section
  if ! grep -q "^$extension_id$" "$VSCODE_EXTENSIONS_FILE"; then
    echo "$extension_id" >> "$VSCODE_EXTENSIONS_FILE"
    echo "Extension '$extension_id' has been added to $VSCODE_EXTENSIONS_FILE."
  else
      warning "$extension_id was already in $VSCODE_EXTENSIONS_FILE!"
  fi
  code --list-extensions > "$VSCODE_EXTENSIONS_FILE"
  section

}

# :command.function
dotfiles_update_vscode_extensions_list_command() {

  # src/update_vscode_extensions_list_command.sh
  #!/bin/bash

  CURRENT_DATE=$(date +%Y%m%d)

  if [ -f "$VSCODE_EXTENSIONS_FILE" ]; then

    warning "¿Are you sure you want to override '$VSCODE_EXTENSIONS_FILE'? (y/n)"
    read -r respuesta

    if [[ "$respuesta" == "y" || "$respuesta" == "Y" ]]; then

      BACKUP_FILE="${VSCODE_EXTENSIONS_FILE}_${CURRENT_DATE}.bakup"
      cp "$VSCODE_EXTENSIONS_FILE" "$BACKUP_FILE"
      echo "Backup file saved at: $BACKUP_FILE"
    else
      info "Operation canceled. File was not overriden."
      exit 0
    fi
  else
    info "File '$VSCODE_EXTENSIONS_FILE' does not exists. No need for backup file."
  fi

  # Mostrar un mensaje indicando que se está actualizando la lista
  info "Updating extensions list of VSCode at $VSCODE_EXTENSIONS_FILE..."

  # Obtener la lista de extensiones instaladas y guardarlas en el archivo
  code --list-extensions > "$VSCODE_EXTENSIONS_FILE"

  # Verificar si la operación fue exitosa
  if [ $? -eq 0 ]; then
    success "Updated extension list saved at $VSCODE_EXTENSIONS_FILE"
  else
    error "There was an error updating extensions list."
    exit 1
  fi

}

# :command.function
dotfiles_uninstall_vscode_extension_command() {

  # src/uninstall_vscode_extension_command.sh
  #!/bin/bash

  # This command uninstalls a VSCode extension and removes it from the extensions.txt file.

  extension_id=${args[extension-id]}

  # Check if the extension is installed
  if ! code --list-extensions 2>/dev/null | grep -q "$extension_id"; then
    warning "Extension '$extension_id' is not installed."
    exit 1
  fi

  # Uninstall the extension
  info "Uninstalling extension '$extension_id'..."
  code --uninstall-extension "$extension_id"

  # Check if the uninstall was successful
  if [ $? -eq 0 ]; then
    success "Extension '$extension_id' successfully uninstalled!"
  else
    error "Error uninstalling extension '$extension_id'."
    exit 1
  fi

  # Remove the extension from extensions.txt
  if grep -q "^$extension_id$" "$VSCODE_EXTENSIONS_FILE"; then
    info "Removing '$extension_id' from $VSCODE_EXTENSIONS_FILE..."
    sed -i.bak "/^$extension_id$/d" "$VSCODE_EXTENSIONS_FILE"
    code --list-extensions > "$VSCODE_EXTENSIONS_FILE"
    success "Extension '$extension_id' removed from $VSCODE_EXTENSIONS_FILE."
  else
    warning "Extension '$extension_id' was not found in $VSCODE_EXTENSIONS_FILE."
  fi

}

# :command.function
dotfiles_sync_vscode_extensions_command() {

  # src/sync_vscode_extensions_command.sh
  #!/bin/bash

  if [ ! -f "$VSCODE_EXTENSIONS_FILE" ]; then
    error "Error: File $VSCODE_EXTENSIONS_FILE does not exits."
    exit 1
  fi

  installed_extensions=$(code --list-extensions)

  extensions_to_install=$(cat "$VSCODE_EXTENSIONS_FILE")

  section
  for extension in $extensions_to_install; do
    if ! echo "$installed_extensions" | grep -q "^$extension$"; then
      info "Installing extension: $extension"
      code --install-extension "$extension"
    fi
  done
  section

  for extension in $installed_extensions; do
    if ! echo "$extensions_to_install" | grep -q "^$extension$"; then
      info "Uninstalling extension: $extension"
      code --uninstall-extension "$extension"
    fi
  done
  section

  success "Synchronization completed successfully!"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    stow-dotfiles | s)
      action="stow-dotfiles"
      shift
      dotfiles_stow_dotfiles_parse_requirements "$@"
      shift $#
      ;;

    symlink-vscode | sym-vscode)
      action="symlink-vscode"
      shift
      dotfiles_symlink_vscode_parse_requirements "$@"
      shift $#
      ;;

    install-vscode-extensions | i-vscode-exts)
      action="install-vscode-extensions"
      shift
      dotfiles_install_vscode_extensions_parse_requirements "$@"
      shift $#
      ;;

    install-vscode-extension | i-vscode-ext)
      action="install-vscode-extension"
      shift
      dotfiles_install_vscode_extension_parse_requirements "$@"
      shift $#
      ;;

    update-vscode-extensions-list | u-vscode-ext-list)
      action="update-vscode-extensions-list"
      shift
      dotfiles_update_vscode_extensions_list_parse_requirements "$@"
      shift $#
      ;;

    uninstall-vscode-extension | un-vscode-ext)
      action="uninstall-vscode-extension"
      shift
      dotfiles_uninstall_vscode_extension_parse_requirements "$@"
      shift $#
      ;;

    sync-vscode-extensions | sync-vscode-exts)
      action="sync-vscode-extensions"
      shift
      dotfiles_sync_vscode_extensions_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfiles_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_stow_dotfiles_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_stow_dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stow-dotfiles"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_symlink_vscode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_symlink_vscode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="symlink-vscode"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_install_vscode_extensions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_install_vscode_extensions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install-vscode-extensions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --update | -u)

        # :flag.case_no_arg
        args['--update']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_install_vscode_extension_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_install_vscode_extension_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install-vscode-extension"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['extension-id']+x} ]]; then
          args['extension-id']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['extension-id']+x} ]]; then
    printf "missing required argument: EXTENSION-ID\nusage: dotfiles install-vscode-extension EXTENSION-ID\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
dotfiles_update_vscode_extensions_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_update_vscode_extensions_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update-vscode-extensions-list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_uninstall_vscode_extension_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_uninstall_vscode_extension_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall-vscode-extension"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['extension-id']+x} ]]; then
          args['extension-id']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['extension-id']+x} ]]; then
    printf "missing required argument: EXTENSION-ID\nusage: dotfiles uninstall-vscode-extension EXTENSION-ID\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
dotfiles_sync_vscode_extensions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_sync_vscode_extensions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync-vscode-extensions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "stow-dotfiles") dotfiles_stow_dotfiles_command ;;
    "symlink-vscode") dotfiles_symlink_vscode_command ;;
    "install-vscode-extensions") dotfiles_install_vscode_extensions_command ;;
    "install-vscode-extension") dotfiles_install_vscode_extension_command ;;
    "update-vscode-extensions-list") dotfiles_update_vscode_extensions_list_command ;;
    "uninstall-vscode-extension") dotfiles_uninstall_vscode_extension_command ;;
    "sync-vscode-extensions") dotfiles_sync_vscode_extensions_command ;;
  esac
}

initialize
run "$@"
