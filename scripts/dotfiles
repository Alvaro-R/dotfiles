#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dotfiles_usage() {
  printf "dotfiles - Tools for managing and installing dotfiles\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles COMMAND\n"
  printf "  dotfiles [COMMAND] --help | -h\n"
  printf "  dotfiles --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create symlinks from .dotfiles to home directory.\n" "stow-dotfiles            "
  printf "  %s   Create symlink for VSCode settings.json.\n" "symlink-vscode           "
  printf "  %s   Install VSCode extensions from .dotfiles/.config/vscode/extesions.txt.\n" "install-vscode-extensions"
  printf "  %s   Install extesion and add it to from .dotfiles/.config/vscode/extesions.txt.\n" "install-vscode-extension "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
dotfiles_stow_dotfiles_usage() {
  printf "dotfiles stow-dotfiles - Create symlinks from .dotfiles to home directory.\n\n"
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles stow-dotfiles\n"
  printf "  dotfiles stow-dotfiles --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_symlink_vscode_usage() {
  printf "dotfiles symlink-vscode - Create symlink for VSCode settings.json.\n\n"
  printf "Alias: sym-vscode\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles symlink-vscode\n"
  printf "  dotfiles symlink-vscode --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_install_vscode_extensions_usage() {
  printf "dotfiles install-vscode-extensions - Install VSCode extensions from .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: i-vscode-exts\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles install-vscode-extensions [OPTIONS]\n"
  printf "  dotfiles install-vscode-extensions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--update, -u"
    printf "    In case extesion is already installed, it will update it to last version.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_install_vscode_extension_usage() {
  printf "dotfiles install-vscode-extension - Install extesion and add it to from .dotfiles/.config/vscode/extesions.txt.\n\n"
  printf "Alias: i-vscode-ext\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dotfiles install-vscode-extension EXTENSION-ID\n"
  printf "  dotfiles install-vscode-extension --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "EXTENSION-ID"
    printf "    Extension ID to be installed.\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# src/lib/echo_strings.sh
#!/bin/bash

# Define sections limits
symbol="─"
times=50
section_limit=""
for ((i=0; i<times; i++)); do
    section_limit+="$symbol"
done
section_limit="$(white_bold "$section_limit")"

section() {
    echo "$section_limit"
}

# Info
info() {
    echo "$(cyan_bold "$1")"
}

# Header
header() {
    echo "$(white_bold "$1")"
}

# Success
success() {
    echo "$(green_bold "✅ [Success] - $1")"
}

# Warning
warning() {
    echo "$(yellow_bold "⚠️ [Warning] - $1")"
}

# Error
error() {
    echo "$(red_bold "❌ [Error] - $1")"
}

# :command.command_functions
# :command.function
dotfiles_stow_dotfiles_command() {

  # src/stow_dotfiles_command.sh
  section
  info "Cretaing symlinks for .dotfiles at home directory..."
  cd ~/.dotfiles
  stow .
  success "Symlinks to .dotfiles created at home directory"

}

# :command.function
dotfiles_symlink_vscode_command() {

  # src/symlink_vscode_command.sh
  #!/bin/bash

  # Ruta de la configuración de VSCode
  DOTFILES_DIR="$HOME/.dotfiles"
  VSCODE_CONFIG_DIR="$HOME/Library/Application Support/Code/User"
  VSCODE_CONFIG_FILE="settings.json"

  # Crear el directorio de configuración de VSCode si no existe
  mkdir -p "$VSCODE_CONFIG_DIR"

  # Eliminar el archivo de configuración existente si existe
  if [ -f "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    echo "Eliminando el archivo existente $VSCODE_CONFIG_FILE"
    rm "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"
  fi

  # Crear el symlink
  echo "Creando symlink para $VSCODE_CONFIG_FILE en $VSCODE_CONFIG_DIR"
  ln -s "$DOTFILES_DIR/vscode/$VSCODE_CONFIG_FILE" "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"

  # Confirmar el symlink
  if [ -L "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    echo "Symlink creado exitosamente."
  else
    echo "Hubo un problema al crear el symlink."
  fi

}

# :command.function
dotfiles_install_vscode_extensions_command() {

  # src/install_vscode_extensions_command.sh
  #!/bin/bash

  # Ruta de la configuración de VSCode
  DOTFILES_DIR="$HOME/.dotfiles"
  VSCODE_CONFIG_DIR="$HOME/Library/Application Support/Code/User"
  VSCODE_CONFIG_FILE="settings.json"

  # Crear el directorio de configuración de VSCode si no existe
  mkdir -p "$VSCODE_CONFIG_DIR"

  # Eliminar el archivo de configuración existente si existe
  if [ -f "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    echo "Eliminando el archivo existente $VSCODE_CONFIG_FILE"
    rm "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"
  fi

  # Crear el symlink
  echo "Creando symlink para $VSCODE_CONFIG_FILE en $VSCODE_CONFIG_DIR"
  ln -s "$DOTFILES_DIR/vscode/$VSCODE_CONFIG_FILE" "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE"

  # Confirmar el symlink
  if [ -L "$VSCODE_CONFIG_DIR/$VSCODE_CONFIG_FILE" ]; then
    echo "Symlink creado exitosamente."
  else
    echo "Hubo un problema al crear el symlink."
  fi

}

# :command.function
dotfiles_install_vscode_extension_command() {

  # src/install_vscode_extension_command.sh
  echo "# this file is located in 'src/install_vscode_extension_command.sh'"
  echo "# code for 'dotfiles install-vscode-extension' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    stow-dotfiles | s)
      action="stow-dotfiles"
      shift
      dotfiles_stow_dotfiles_parse_requirements "$@"
      shift $#
      ;;

    symlink-vscode | sym-vscode)
      action="symlink-vscode"
      shift
      dotfiles_symlink_vscode_parse_requirements "$@"
      shift $#
      ;;

    install-vscode-extensions | i-vscode-exts)
      action="install-vscode-extensions"
      shift
      dotfiles_install_vscode_extensions_parse_requirements "$@"
      shift $#
      ;;

    install-vscode-extension | i-vscode-ext)
      action="install-vscode-extension"
      shift
      dotfiles_install_vscode_extension_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfiles_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_stow_dotfiles_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_stow_dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stow-dotfiles"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_symlink_vscode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_symlink_vscode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="symlink-vscode"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_install_vscode_extensions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_install_vscode_extensions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install-vscode-extensions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --update | -u)

        # :flag.case_no_arg
        args['--update']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_install_vscode_extension_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_install_vscode_extension_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install-vscode-extension"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['extension-id']+x} ]]; then
          args['extension-id']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['extension-id']+x} ]]; then
    printf "missing required argument: EXTENSION-ID\nusage: dotfiles install-vscode-extension EXTENSION-ID\n" >&2

    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "stow-dotfiles") dotfiles_stow_dotfiles_command ;;
    "symlink-vscode") dotfiles_symlink_vscode_command ;;
    "install-vscode-extensions") dotfiles_install_vscode_extensions_command ;;
    "install-vscode-extension") dotfiles_install_vscode_extension_command ;;
  esac
}

initialize
run "$@"
